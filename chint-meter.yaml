esphome:
  name: chint-meter
  comment: chint-meter ddsu666 modbus controller
  platform: ESP32
  board: esp32-c3-devkitm-1
  platformio_options:
    #[env:esp32-c3-devkitm-1]
    platform: espressif32
    platform_packages: 
      - platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git
    #https://docs.platformio.org/en/latest/platforms/espressif32.html
    # change microcontroller
    board_build.mcu: esp32c3
    # set frequency to 160MHz
    board_build.f_cpu: 160000000L
    # set frequency to 40MHz
    board_build.f_flash: 40000000L
    # set flash mode opt(qio/qout/dio/dout)
    board_build.flash_mode: dio
    # set upload protocol,default esptool.
    #https://docs.platformio.org/en/latest/boards/espressif32/esp32-c3-devkitm-1.html
    upload_protocol: espota

#esp32:
#  board: esp32-c3-devkitm-1
#  framework:
#    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "BHUO2sAegwIuE4msCIV7xP+sZoy4G+3mQ/6oAwCZZRU="

ota:
  password: "e92a7ce4529aa0d46d66bdd9b5e21785"

#https://esphome.io/components/wifi.html
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Chint-Meter Fallback Hotspot"
    password: "mupiCoxYTEAj"
    
#Web Server Component
#https://esphome.io/components/web_server.html
web_server:
  port: 80
  #no internet/intranet required
  local: true

#Time
#The time component allows you to set up real time clock time sources for ESPHome.
time:
  - platform: sntp
    id: sntp_time

#UART Bus
#https://esphome.io/components/uart.html
uart:
  id: esp32_uart
  tx_pin: 19
  rx_pin: 18
  baud_rate: 9600
  data_bits: 8 #default 8
  stop_bits: 1 #default 1

#Modebus
modbus:
  #flow_control_pin: 5
  id: esp32_modbus1
  send_wait_time: 200ms

#Modbus Controller
#https://esphome.io/components/modbus_controller.html
modbus_controller:
  - id: esp32_modbus_ctrl
    ## the Modbus device addr
    address: 0x1
    modbus_id: esp32_modbus1
    setup_priority: -10
    update_interval: 5s

#Uptime Sensor
#https://esphome.io/components/sensor/uptime.html
text_sensor:
  - platform: template
    name: Uptime_Text
    id: uptime_t
    icon: mdi:clock-start

sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 30s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_t
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
#WiFi Signal Sensor
#https://esphome.io/components/sensor/wifi_signal.html
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 20s

#Modbus Sensor
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_u
    name: "U"
    address: 0x2000
    register_count: 2
    unit_of_measurement: "V"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 1
    device_class: voltage
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_i
    name: "I"
    address: 0x2002
    register_count: 2
    unit_of_measurement: "A"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 3
    device_class: current
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_p
    name: "P"
    address: 0x2004
    register_count: 2
    unit_of_measurement: "W"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 1
    filters:
      - multiply: 1000
    device_class: power
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_q
    name: "Q"
    address: 0x2006
    register_count: 2
    unit_of_measurement: "var"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 1
    filters:
      - multiply: 1000
    device_class: power
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_s
    name: "S"
    address: 0x2008
    register_count: 2
    unit_of_measurement: "VA"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 1
    filters:
      - multiply: 1000
    device_class: power
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_pf
    name: "PF"
    address: 0x200A
    register_count: 2
    register_type: holding
    value_type: FP32
    accuracy_decimals: 3
    device_class: power_factor
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_freq
    name: "Freq"
    address: 0x200E
    register_count: 2
    unit_of_measurement: "Hz"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: esp32_modbus_ctrl
    id: meter_ep
    name: "Ep"
    address: 0x4000
    register_count: 2
    unit_of_measurement: "kWh"
    register_type: holding
    value_type: FP32
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
